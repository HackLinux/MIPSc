// Generated by Bisonc++ V4.01.00 on Tue, 26 Feb 2013 14:54:58 -0800

	// Include this file in the sources of the class Parser.

// $insert class.h
#include "Parser.h"
#include <string>

inline void Parser::error(char const *msg)
{
	Loc& location = scanner->getLoc();
	
	std::cerr << "Syntax Error Found around " << location.lnum << ":" << location.cnum << std::endl;

	// std::cerr << "Syntax Error @: " << location.lnum << ":" << location.cnum << std::endl;
}

// $insert lex
inline int Parser::lex()
{
	std::string symboltable_filename( "symboltable.txt" );

	int token = scanner->lex();
	
	if( token == Parser::ENDOFFILE )
	
		return 0;
	
	else
	
		return token;
	
}

inline void Parser::print()			
{
	print__();			 // displays tokens if --print was specified
}


void Parser::configDebugPrint(std::ostream& os, std::string prefix, std::string postfix)
{
	if (os.good()) {
		// std::cout << "Setting output stream" << std::endl;
		debug.debugOutput = true;
		debug.debugOutputStream.rdbuf(os.rdbuf());
	}
	else {
		std::cerr << "Parser::setDebugPrintTo() : the supplied stream is not good";
		std::cerr << "Setting output stream to stdout" << std::endl;
		debug.debugOutputStream.rdbuf(std::cout.rdbuf());
	}
	debug.debugOutputPrefix  = prefix;
	debug.debugOutputPostfix = postfix;
}

void setDeclarationLocation()
{

	currentDeclaration->location = scanner->getLoc();

}

void Parser::debugPrint(std::string msg)
{
	if (debug.debugOutput) {
		if (debug.debugOutputStream) {
			debug.debugOutputStream 
				<< debug.debugOutputPrefix
				<< msg 
				<< debug.debugOutputPostfix
				<< std::endl; 

		}
	}
}

	// Add here includes that are only required for the compilation 
	// of Parser's sources.



	// UN-comment the next using-declaration if you want to use
	// int Parser's sources symbols from the namespace std without
	// specifying std::

//using namespace std;
