// Generated by Bisonc++ V4.01.00 on Tue, 26 Feb 2013 14:54:58 -0800

	// Include this file in the sources of the class Parser.

// $insert class.h
#include "Parser.h"
#include <string>
#include <vector>
#include "Operation.h"

#include "AllASTNodes.h"

inline void Parser::error(char const *msg)
{
	SymbolLocation& location = scanner->getLoc();
	
	std::cerr << "Syntax Error Found around " << location.lnum << ":" << location.cnum << std::endl;

	// std::cerr << "Syntax Error @: " << location.lnum << ":" << location.cnum << std::endl;
}

// $insert lex
inline int Parser::lex()
{
	
	// Skip useless tokens such as whitespace and comment
	do {
		token = scanner->lex();
	} while ( isUseless(token) );

	// Lex Debug and Token File can be created here
	//
	
	std::cout << "lex() : " << scanner->matched() << " : " << token << std::endl;

	// Return token value
	if( token == Parser::ENDOFFILE ) {

		std::cout << "END OF FILE" << std::endl;
	
		return 0;
	}
	
	else
	
		return token;
	
}

bool Parser::isUseless(int token)
{
	bool useless = (
		token == Parser::COMMENT ||
		token == Parser::WHITESPACE
	);
	return useless;
}

inline void Parser::print()			
{
	print__();			 // displays tokens if --print was specified
}


void Parser::configDebugPrint(std::ostream& os, std::string prefix, std::string postfix)
{
	if (os.good()) {
		// std::cout << "Setting output stream" << std::endl;
		debug.debugOutput = true;
		debug.debugOutputStream.rdbuf(os.rdbuf());
	}
	else {
		std::cerr << "Parser::setDebugPrintTo() : the supplied stream is not good";
		std::cerr << "Setting output stream to stdout" << std::endl;
		debug.debugOutputStream.rdbuf(std::cout.rdbuf());
	}
	debug.debugOutputPrefix  = prefix;
	debug.debugOutputPostfix = postfix;
}



void Parser::debugPrint(std::string msg)
{
	if (debug.debugOutput) {
		if (debug.debugOutputStream) {
			debug.debugOutputStream 
				<< debug.debugOutputPrefix
				<< msg 
				<< debug.debugOutputPostfix
				<< std::endl; 
		}
	}
}


// ---------------------------------------------------------------------------
// Declaration Related
void Parser::setDeclarationLocation()
{

	//SymbolLocation loc( scanner->getLoc() );
	//currentDeclaration.location = loc;
	//currentDeclaration.id = scanner->matched();

}
void Parser::beginDeclarationSection()
{
	declarationMode = true;
}
void Parser::beginLookupSection()      
{ 
	declarationMode = false;
}
void Parser::declare()                    
{
	std::cout << "implement declare()" << std::endl;
	auto symbolList = decl.createSymbols();
	for ( auto symbol : symbolList ) {
		symbolTable->insertSymbol( symbol );
	}

	decl.clear();
	
}
void Parser::determineType()              
{
	std::cout << "implement determineType()" << std::endl;
}
void Parser::initializeArray()            
{
	std::cout << "implement initializeArray()" << std::endl;
}
void Parser::addValueToArray()            
{
	std::cout << "implement addValueToArray()" << std::endl;
}
void Parser::pushIdentifier()          
{
	std::cout << "implement pushIdentifier()" << std::endl;
	decl.pushIdentifier(scanner->matched());
}
void Parser::addStorageSpecifier()
{
	std::cout << "implement addStorageSpeficier()" << std::endl;
	decl.addTypeSpecifier(scanner->matched());
}
void Parser::addTypeSpecifier()      
{
	std::cout << "implement addTypeSpecifier()" << std::endl;
	decl.addTypeSpecifier(scanner->matched());
}
void Parser::setConst()              
{
	std::cout << "implement setConst()" << std::endl;
}
void Parser::setVolitle()            
{
	std::cout << "implement setVolitle()" << std::endl;
}
void Parser::specifyArray()          
{
	std::cout << "implement specifyArray()" << std::endl;
}
void Parser::specifyFunction()       
{
	std::cout << "implement specifyFunction()" << std::endl;
}
void Parser::specifyFunctionCall()   
{
	std::cout << "implement specifyFunctionCall()" << std::endl;
}

bool Parser::isDeclarationMode()
{
	
	return declarationMode;
	
}

ASTData* Parser::generate3AC()
{
	return  (ast) ? ast->toOperations() : NULL ;
}

	// Add here includes that are only required for the compilation 
	// of Parser's sources.



	// UN-comment the next using-declaration if you want to use
	// int Parser's sources symbols from the namespace std without
	// specifying std::

//using namespace std;
